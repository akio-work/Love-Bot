import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from flask import Flask, request, Response

API_TOKEN = "8232680735:AAG-GFL8ZOUla-OwP-0D5bDhnFpNaH6e-pU"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot=bot)
app = Flask(__name__)

# --- –ü–∞–º'—è—Ç—å –∑–∞–º—ñ—Å—Ç—å –±–∞–∑–∏ ---
couples = {}  # –∫–ª—é—á: tuple(user1_id, user2_id), –∑–Ω–∞—á–µ–Ω–Ω—è: wed_date (datetime)
users_lang = {}  # –∫–ª—é—á: user_id, –∑–Ω–∞—á–µ–Ω–Ω—è: lang

# --- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
MESSAGES = {
    "uk": {
        "proposal_offer": "{target}, –≤–∞–º —Ä–æ–±–ª—è—Ç—å –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è –≤—ñ–¥ {proposer}!\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚úÖ —è–∫—â–æ –∑–≥–æ–¥–Ω—ñ, –∞–±–æ ‚ùå —è–∫—â–æ –Ω—ñ.",
        "proposal_accepted": "üéâ {couple}, –≤–∏ —Ç–µ–ø–µ—Ä –∑–∞—Ä—É—á–µ–Ω—ñ! –ì–æ—Ç—É–π—Ç–µ—Å—è –¥–æ –≤–µ–ª–∏–∫–æ–≥–æ —Å–≤—è—Ç–∞! üíñ",
        "proposal_declined": "{target} –≤—ñ–¥–º–æ–≤–∏–≤(–ª–∞) {proposer}.",
        "self_propose": "–ù–µ –º–æ–∂–Ω–∞ –ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Å–æ–±—ñ.",
        "not_engaged_for_marry": "–í–∏ —â–µ –Ω–µ –∑–∞—Ä—É—á–µ–Ω—ñ, —â–æ–± –ø–æ—á–∞—Ç–∏ –≤–µ—Å—ñ–ª–ª—è!",
        "wedding_in_progress": "–í–µ—Å—ñ–ª–ª—è –≤–∂–µ —Ç—Ä–∏–≤–∞—î, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ.",
        "wedding_start": "üíí –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –≤–µ—Å—ñ–ª—å–Ω–µ –≥—É–ª—è–Ω–Ω—è –¥–ª—è {couple}! üéâ",
        "wedding_finished": "–í–µ—Å—ñ–ª–ª—è {couple} –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –•–∞–π –∂–∏–≤–µ –ª—é–±–æ–≤! ‚ù§Ô∏è",
        "top_empty": "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞—Ä—É—á–µ–Ω–∏—Ö –ø–∞—Ä.",
        "commands_list": (
            "/propose - –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è\n"
            "/marry - –ø–æ—á–∞—Ç–∏ –≤–µ—Å—ñ–ª–ª—è –¥–ª—è –∑–∞—Ä—É—á–µ–Ω–∏—Ö –ø–∞—Ä\n"
            "/topcouples - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –ø–∞—Ä —ñ —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É —Ä–∞–∑–æ–º\n"
            "/divorce - —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å –∑—ñ —Å–≤–æ—î—é –ø–æ–ª–æ–≤–∏–Ω–∫–æ—é\n"
            "/commands - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/profile - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n"
        ),
        "help_dm": (
            "–í—ñ—Ç–∞–Ω–Ω—è! –û—Å—å —â–æ —è –≤–º—ñ—é:\n"
            "/propose ‚Äî –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é\n"
            "/marry ‚Äî –ø–æ—á–∞—Ç–∏ –≤–µ—Å—ñ–ª–ª—è\n"
            "/topcouples ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –ø–∞—Ä\n"
            "/divorce ‚Äî —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å –∑—ñ —Å–≤–æ—î—é –ø–æ–ª–æ–≤–∏–Ω–∫–æ—é\n"
            "/commands ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n"
            "\n–¢–µ—Ö. –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: @KR_LVXH"
        ),
        "proposal_sent": "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        "divorce_no_spouse": "–í–∏ –Ω–µ –æ–¥—Ä—É–∂–µ–Ω—ñ, —â–æ–± —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å.",
        "divorce_success": "üíî {user1} —Ç–∞ {user2} —Ç–µ–ø–µ—Ä —Ä–æ–∑–≤–µ–¥–µ–Ω—ñ. –ù–µ—Ö–∞–π —à–ª—è—Ö –±—É–¥–µ —Å–≤—ñ—Ç–ª–∏–º —ñ –Ω–æ–≤–∏–º!",
        "profile_info": "üë§ –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n–Ü–º'—è: {name}\nID: {id}\n–ú–æ–≤–∞: {lang}\n–û–¥—Ä—É–∂–µ–Ω–∏–π: {married}",
        "not_married": "–ù–∞—Ä–∞–∑—ñ –≤–∏ –Ω–µ –æ–¥—Ä—É–∂–µ–Ω—ñ."
    }
}

pending_proposals = {}  # proposal_id: (proposer_id, proposee_id)

# --- –§—É–Ω–∫—Ü—ñ—ó –º–æ–≤–∏ ---
def get_lang(user_id: int):
    return users_lang.get(user_id, "uk")

def set_lang(user_id: int, lang: str):
    users_lang[user_id] = lang

# --- –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É ---
def format_duration(start_time: datetime):
    now = datetime.now()
    diff = now - start_time
    minutes = int(diff.total_seconds() // 60)
    if minutes < 60:
        return f"{minutes} —Ö–≤–∏–ª–∏–Ω"
    hours = minutes // 60
    if hours < 24:
        return f"{hours} –≥–æ–¥–∏–Ω"
    days = hours // 24
    if days < 30:
        return f"{days} –¥–Ω—ñ–≤"
    months = days // 30
    if months < 12:
        return f"{months} –º—ñ—Å—è—Ü—ñ–≤"
    years = months // 12
    return f"{years} —Ä–æ–∫—ñ–≤"

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    lang = get_lang(message.from_user.id)
    await message.answer(MESSAGES[lang]["help_dm"])

@dp.message(Command("commands"))
async def cmd_commands(message: types.Message):
    lang = get_lang(message.from_user.id)
    await message.answer(MESSAGES[lang]["commands_list"])

@dp.message(Command("propose"))
async def cmd_propose(message: types.Message):
    lang = get_lang(message.from_user.id)
    text = message.text or ""
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–í–∫–∞–∂–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ä–æ–±–∏—à –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é, —á–µ—Ä–µ–∑ @username")
        return

    username = parts[1].lstrip("@").strip().lower()
    if username == (message.from_user.username or "").lower():
        await message.reply(MESSAGES[lang]["self_propose"])
        return

    # –®—É–∫–∞—î–º–æ proposee –ø–æ username ‚Äî —Ç—Ä–µ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ user_id, –∞–ª–µ —É –ø–∞–º'—è—Ç—ñ –Ω–µ–º–∞—î ‚Äî –∑—Ä–æ–±–∏–º–æ –ø—Ä–æ—Å—Ç–æ mock:
    # –£ —Ä–µ–∞–ª—å–Ω–æ–º—É —Å–≤—ñ—Ç—ñ —Ç—Ä–µ–±–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –∞–ª–µ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É –ø—Ä–æ–ø—É—Å—Ç–∏–º–æ —Ü–µ.
    # –¢–æ–∂ –±—É–¥–µ–º–æ —á–µ–∫–∞—Ç–∏ —â–æ proposee –≤–∂–µ –∑–Ω–∞—î–º–æ (–∞–±–æ –≤—ñ–¥—Ö–∏–ª—è—Ç–∏).
    await message.reply("–ü–æ–∫–∏ —â–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑–∞ username –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞. –ù–∞–¥—ñ—à–ª–∏ id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –¥–æ–ø–∏—à–µ–º–æ –ø—ñ–∑–Ω—ñ—à–µ.")
    # –ú–æ–∂–Ω–∞ —Ç—É—Ç –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑ mention —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é user_id.
    # –©–æ–± –Ω–µ —É—Å–∫–ª–∞–¥–Ω—é–≤–∞—Ç–∏, –ø–æ–∫–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å –ª–∏—à–µ –Ω–∞ id.
    # –ê–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π —é–∑–µ—Ä–∞–º –ø–∏—Å–∞—Ç–∏ "/propose user_id"

@dp.message(Command("propose"))
async def cmd_propose_id(message: types.Message):
    lang = get_lang(message.from_user.id)
    text = message.text or ""
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        return  # –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤–∏—â–µ

    try:
        proposee_id = int(parts[1])
    except ValueError:
        return

    proposer_id = message.from_user.id
    if proposee_id == proposer_id:
        await message.reply(MESSAGES[lang]["self_propose"])
        return

    proposal_id = f"{message.chat.id}_{message.message_id}"
    proposer = message.from_user

    text = MESSAGES[lang]["proposal_offer"].format(target=f"User {proposee_id}", proposer=proposer.full_name)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ", callback_data=f"proposal_accept:{proposal_id}:{proposer_id}:{proposee_id}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"proposal_decline:{proposal_id}:{proposer_id}:{proposee_id}")
        ]
    ])
    await message.answer(text, reply_markup=kb)
    pending_proposals[proposal_id] = (proposer_id, proposee_id)
    await message.reply(MESSAGES[lang]["proposal_sent"])

@dp.callback_query(lambda c: c.data and c.data.startswith("proposal_"))
async def proposal_callback(call: types.CallbackQuery):
    data = call.data.split(":")
    action = data[0].split("_")[1]
    proposal_id = data[1]
    proposer_id = int(data[2])
    proposee_id = int(data[3])

    lang = get_lang(call.from_user.id)
    proposer_accepted = (action == "accept")

    if call.from_user.id != proposee_id:
        await call.answer("–¶–µ –Ω–µ –≤–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è!", show_alert=True)
        return

    if proposal_id not in pending_proposals:
        await call.answer("–¶—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞.", show_alert=True)
        return

    if proposer_accepted:
        couple_key = tuple(sorted((proposer_id, proposee_id)))
        couples[couple_key] = datetime.now()

        user1 = await bot.get_chat(couple_key[0])
        user2 = await bot.get_chat(couple_key[1])
        couple_name = f"[{user1.first_name}](tg://user?id={couple_key[0]}) —ñ [{user2.first_name}](tg://user?id={couple_key[1]})"

        text = MESSAGES[lang]["proposal_accepted"].format(couple=couple_name)
        await call.message.edit_text(text, parse_mode="Markdown")
        pending_proposals.pop(proposal_id, None)
    else:
        text = MESSAGES[lang]["proposal_declined"].format(target=call.from_user.full_name, proposer=f"User {proposer_id}")
        await call.message.edit_text(text)
        pending_proposals.pop(proposal_id, None)

    await call.answer()

@dp.message(Command("marry"))
async def cmd_marry(message: types.Message):
    lang = get_lang(message.from_user.id)
    author_id = message.from_user.id

    couple = None
    for (u1, u2), wed_date in couples.items():
        if author_id in (u1, u2):
            couple = (u1, u2, wed_date)
            break

    if not couple:
        await message.reply(MESSAGES[lang]["not_engaged_for_marry"])
        return

    if getattr(dp, "marriage_active", False):
        await message.reply(MESSAGES[lang]["wedding_in_progress"])
        return

    dp.marriage_active = True
    user1_id, user2_id, wed_date = couple

    try:
        user1 = await bot.get_chat(user1_id)
        user2 = await bot.get_chat(user2_id)
        couple_name = f"[{user1.first_name}](tg://user?id={user1_id}) —ñ [{user2.first_name}](tg://user?id={user2_id})"
    except Exception:
        couple_name = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ {user1_id} —ñ {user2_id}"

    await message.answer(MESSAGES[lang]["wedding_start"].format(couple=couple_name), parse_mode="Markdown")

    wedding_messages = [
        "üé∂ –ó–≤—É—á–∏—Ç—å –≤–µ—Å—ñ–ª—å–Ω–∏–π –º–∞—Ä—à... üé∂",
        f"–î—Ä—É–∑—ñ —Ç–∞ —Ä–æ–¥–∏–Ω–∞ –∑—ñ–±—Ä–∞–ª–∏—Å—è, —â–æ–± –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏ {couple_name}!",
        "–ù–µ—Ö–∞–π –≤–∞—à–µ –∂–∏—Ç—Ç—è –±—É–¥–µ —Å–ø–æ–≤–Ω–µ–Ω–µ –ª—é–±–æ–≤—ñ —Ç–∞ —â–∞—Å—Ç—è!",
        "–ü—ñ–¥–Ω—ñ–º–µ–º–æ –∫–µ–ª–∏—Ö–∏ –∑–∞ –º–æ–ª–æ–¥—è—Ç! ü•Ç",
        "–¢–∞–Ω—Ü—ñ, —Å–º—ñ—Ö —ñ —Ä–∞–¥—ñ—Å—Ç—å –∑–∞–ø–æ–≤–Ω—é—é—Ç—å —Ü–µ–π –¥–µ–Ω—å! üíÉüï∫",
        "–ù–µ—Ö–∞–π —Ü–µ–π –¥–µ–Ω—å –∑–∞–ø–∞–º‚Äô—è—Ç–∞—î—Ç—å—Å—è –Ω–∞–∑–∞–≤–∂–¥–∏! üéÜ"
    ]

    for msg_text in wedding_messages:
        await message.answer(msg_text, parse_mode="Markdown")
        await asyncio.sleep(4)

    dp.marriage_active = False
    await message.answer(MESSAGES[lang]["wedding_finished"].format(couple=couple_name), parse_mode="Markdown")

@dp.message(Command("topcouples"))
async def cmd_topcouples(message: types.Message):
    lang = get_lang(message.from_user.id)

    if not couples:
        await message.reply(MESSAGES[lang]["top_empty"])
        return

    couples_info = []
    for (user1_id, user2_id), wed_date in couples.items():
        duration = format_duration(wed_date)

        try:
            user1 = await bot.get_chat(user1_id)
            user2 = await bot.get_chat(user2_id)
            couple_name = f"{user1.first_name} —ñ {user2.first_name}"
        except Exception:
            couple_name = f"–ü–∞—Ä–∞ {user1_id} —ñ {user2_id}"

        couples_info.append((couple_name, wed_date, duration))

    couples_info.sort(key=lambda x: x[1])

    text_lines = ["üåπ –¢–æ–ø –∑–∞–∫–æ—Ö–∞–Ω–∏—Ö –ø–∞—Ä:"]
    for name, _, duration in couples_info:
        text_lines.append(f"üíë {name} ‚Äî —Ä–∞–∑–æ–º –≤–∂–µ {duration}")

    await message.answer("\n".join(text_lines))

@dp.message(Command("divorce"))
async def cmd_divorce(message: types.Message):
    lang = get_lang(message.from_user.id)
    user_id = message.from_user.id

    couple_key = None
    for (u1, u2) in couples.keys():
        if user_id in (u1, u2):
            couple_key = (u1, u2)
            break

    if not couple_key:
        await message.reply(MESSAGES[lang]["divorce_no_spouse"])
        return

    user1_id, user2_id = couple_key
    try:
        user1 = await bot.get_chat(user1_id)
        user2 = await bot.get_chat(user2_id)
        user1_name = user1.first_name
        user2_name = user2.first_name
    except Exception:
        user1_name = f"User {user1_id}"
        user2_name = f"User {user2_id}"

    couples.pop(couple_key)

    await message.answer(MESSAGES[lang]["divorce_success"].format(user1=user1_name, user2=user2_name))

@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    lang = get_lang(message.from_user.id)
    user_id = message.from_user.id
    user_name = message.from_user.full_name

    couple_key = None
    for (u1, u2) in couples.keys():
        if user_id in (u1, u2):
            couple_key = (u1, u2)
            break

    if couple_key:
        partner_id = couple_key[1] if couple_key[0] == user_id else couple_key[0]
        try:
            partner = await bot.get_chat(partner_id)
            married = f"–û–¥—Ä—É–∂–µ–Ω–∏–π –∑ {partner.full_name}"
        except Exception:
            married = "–û–¥—Ä—É–∂–µ–Ω–∏–π"
    else:
        married = MESSAGES[lang]["not_married"]

    text = MESSAGES[lang]["profile_info"].format(
        name=user_name,
        id=user_id,
        lang=lang,
        married=married
    )
    await message.answer(text)

# --- –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ ---
async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º"),
        BotCommand(command="propose", description="–ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è"),
        BotCommand(command="marry", description="–ü–æ—á–∞—Ç–∏ –≤–µ—Å—ñ–ª–ª—è –¥–ª—è –∑–∞—Ä—É—á–µ–Ω–∏—Ö –ø–∞—Ä"),
        BotCommand(command="topcouples", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –ø–∞—Ä"),
        BotCommand(command="divorce", description="–†–æ–∑–≤–µ–∑—Ç–∏—Å—å –∑—ñ —Å–≤–æ—î—é –ø–æ–ª–æ–≤–∏–Ω–∫–æ—é"),
        BotCommand(command="commands", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand(command="profile", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"),
    ]
    await bot.set_my_commands(commands)

# --- –í–µ–±—Ö—É–∫ ---

@app.route(f"/webhook/{API_TOKEN}", methods=["POST"])
def webhook():
    json_update = request.get_json()
    update = types.Update(**json_update)
    loop = asyncio.get_event_loop()
    loop.create_task(dp.feed_update(update))
    return Response("OK", status=200)

# --- –ó–∞–ø—É—Å–∫ ---

async def main():
    await set_bot_commands()
    from hypercorn.asyncio import serve
    from hypercorn.config import Config

    config = Config()
    config.bind = ["0.0.0.0:8443"]

    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è, —Ç—Ä–∏–º–∞–π—Å—è üíç‚ú®...")
    await serve(app, config)

if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
