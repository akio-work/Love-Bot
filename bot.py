import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from database import get_db, get_lang_status, get_couple, add_couple, update_status_free, update_status_married, delete_couple
from keep_alive import keep_alive

API_TOKEN = "8232680735:AAG-GFL8ZOUla-OwP-0D5bDhnFpNaH6e-pU"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

MESSAGES = {
    "uk": {
        "help_dm": (
            "–í—ñ—Ç–∞–Ω–Ω—è! –û—Å—å —â–æ —è –≤–º—ñ—é:\n"
            "/marry @username ‚Äî –æ–¥—Ä—É–∂–∏—Ç–∏—Å—å –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º üë∞ü§µ\n"
            "/topcouples ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –ø–∞—Ä ü•á\n"
            "/divorce ‚Äî —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å üíî\n"
            "/profile ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å üïµÔ∏è‚Äç‚ôÇÔ∏è\n"
            "/commands ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üìã\n"
            "\n–¢–µ—Ö. –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: @KR_LVXH"
        ),
        "commands_list": (
            "üìú –û—Å—å —â–æ —è –≤–º—ñ—é:\n"
            "/marry @username ‚Äî –æ–¥—Ä—É–∂–∏—Ç–∏—Å—å –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º üë∞ü§µ\n"
            "/topcouples ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –ø–∞—Ä ü•á\n"
            "/divorce ‚Äî —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å üíî\n"
            "/profile ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å üïµÔ∏è‚Äç‚ôÇÔ∏è\n"
            "/commands ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üìã\n"
        ),
        "already_married": "‚ùå –í–∏ –∞–±–æ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –≤–∂–µ –æ–¥—Ä—É–∂–µ–Ω—ñ.",
        "not_found": "üò¢ –ù–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —á–∞—Ç—ñ.",
        "self_marry": "üôÖ‚Äç‚ôÇÔ∏è –ù–µ –º–æ–∂–Ω–∞ –æ–¥—Ä—É–∂–∏—Ç–∏—Å—å –∑ —Å–∞–º–∏–º —Å–æ–±–æ—é!",
        "marriage_start": "üíí {couple} –ø–æ—á–∏–Ω–∞—é—Ç—å –≤–µ—Å—ñ–ª–ª—è! üéâ",
        "wedding_messages": [
            "üé∂ –ó–≤—É—á–∏—Ç—å –≤–µ—Å—ñ–ª—å–Ω–∏–π –º–∞—Ä—à... üé∂",
            "–î—Ä—É–∑—ñ —Ç–∞ —Ä–æ–¥–∏–Ω–∞ –∑—ñ–±—Ä–∞–ª–∏—Å—è, —â–æ–± –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏ {couple}!",
            "–ù–µ—Ö–∞–π –≤–∞—à–µ –∂–∏—Ç—Ç—è –±—É–¥–µ —Å–ø–æ–≤–Ω–µ–Ω–µ –ª—é–±–æ–≤—ñ —Ç–∞ —â–∞—Å—Ç—è! üåπ",
            "–ü—ñ–¥–Ω—ñ–º–µ–º–æ –∫–µ–ª–∏—Ö–∏ –∑–∞ –º–æ–ª–æ–¥—è—Ç! ü•Ç",
            "–¢–∞–Ω—Ü—ñ, —Å–º—ñ—Ö —ñ —Ä–∞–¥—ñ—Å—Ç—å –∑–∞–ø–æ–≤–Ω—é—é—Ç—å —Ü–µ–π –¥–µ–Ω—å! üíÉüï∫",
            "–ù–µ—Ö–∞–π —Ü–µ–π –¥–µ–Ω—å –∑–∞–ø–∞–º‚Äô—è—Ç–∞—î—Ç—å—Å—è –Ω–∞–∑–∞–≤–∂–¥–∏! üéÜ"
        ],
        "wedding_finished": "üéä –í–µ—Å—ñ–ª–ª—è {couple} –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –•–∞–π –∂–∏–≤–µ –ª—é–±–æ–≤! ‚ù§Ô∏è",
        "top_empty": "ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞—Ä—É—á–µ–Ω–∏—Ö –ø–∞—Ä.",
        "top_list_header": "üî• –¢–æ–ø –ø–∞—Ä –≤ –≥—Ä—É–ø—ñ:\n\n",
        "divorce_no_spouse": "‚ùå –í–∏ –Ω–µ –æ–¥—Ä—É–∂–µ–Ω—ñ, —â–æ–± —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å.",
        "divorce_success": "üíî {user1} —Ç–∞ {user2} —Ç–µ–ø–µ—Ä —Ä–æ–∑–≤–µ–¥–µ–Ω—ñ. –ù–µ—Ö–∞–π —à–ª—è—Ö –±—É–¥–µ —Å–≤—ñ—Ç–ª–∏–º —ñ –Ω–æ–≤–∏–º!",
        "profile_no_marriage": "üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –æ–¥—Ä—É–∂–µ–Ω–∏–º. –°–ø–µ—Ä—à—É –æ–¥—Ä—É–∂—ñ—Ç—å—Å—è —á–µ—Ä–µ–∑ /marry.",
        "profile_header": "üìá –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n",
        "profile_status": "–°—Ç–∞—Ç—É—Å: {status}\n",
        "profile_married_to": "–û–¥—Ä—É–∂–µ–Ω–∏–π(–∞) –∑: {partner}\n",
        "profile_married_since": "–û–¥—Ä—É–∂–µ–Ω—ñ –∑: {since}\n"
    }
}

def format_duration(start_time: datetime):
    now = datetime.now()
    diff = now - start_time
    minutes = int(diff.total_seconds() // 60)

    if minutes < 60:
        return f"{minutes} —Ö–≤–∏–ª–∏–Ω"
    hours = minutes // 60
    if hours < 24:
        return f"{hours} –≥–æ–¥–∏–Ω"
    days = hours // 24
    if days < 30:
        return f"{days} –¥–Ω—ñ–≤"
    months = days // 30
    if months < 12:
        return f"{months} –º—ñ—Å—è—Ü—ñ–≤"
    years = months // 12
    return f"{years} —Ä–æ–∫—ñ–≤"

async def get_user_name(chat_id: int, user_id: int):
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.user.full_name
    except:
        return f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}"

@dp.message(Command("start"))
async def cmd_start(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)
    await message.answer(MESSAGES[lang]["help_dm"])
    conn.close()

@dp.message(Command("commands"))
async def cmd_commands(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)
    await message.answer(MESSAGES[lang]["commands_list"])
    conn.close()

@dp.message(Command("marry"))
async def cmd_marry(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)
    
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–©–æ–± –æ–¥—Ä—É–∂–∏—Ç–∏—Å—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π: /marry @username")
        conn.close()
        return
    
    username = parts[1].lstrip("@").strip()
    if username.lower() == (message.from_user.username or "").lower():
        await message.reply(MESSAGES[lang]["self_marry"])
        conn.close()
        return
    
    # –®—É–∫–∞—î–º–æ user_id –ø–æ username (—á–µ—Ä–µ–∑ get_chat_member)
    try:
        chat_members = await bot.get_chat_administrators(message.chat.id)
        target_user = None
        for member in chat_members:
            if member.user.username and member.user.username.lower() == username.lower():
                target_user = member.user
                break
        if not target_user:
            await message.reply(MESSAGES[lang]["not_found"])
            conn.close()
            return
    except Exception:
        await message.reply(MESSAGES[lang]["not_found"])
        conn.close()
        return

    author_id = message.from_user.id
    target_id = target_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –æ–¥—Ä—É–∂–µ–Ω—ñ
    couple_author = get_couple(conn, author_id)
    couple_target = get_couple(conn, target_id)

    if couple_author or couple_target:
        await message.reply(MESSAGES[lang]["already_married"])
        conn.close()
        return

    # –î–æ–¥–∞—î–º–æ –ø–∞—Ä—É, –∑–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ—Å—ñ–ª–ª—è
    add_couple(conn, author_id, target_id)

    user1_name = message.from_user.full_name
    user2_name = target_user.full_name
    couple_name = f"[{user1_name}](tg://user?id={author_id}) —ñ [{user2_name}](tg://user?id={target_id})"

    await message.answer(MESSAGES[lang]["marriage_start"].format(couple=couple_name), parse_mode="Markdown")

    for msg_text in MESSAGES[lang]["wedding_messages"]:
        await message.answer(msg_text.format(couple=couple_name), parse_mode="Markdown")
        await asyncio.sleep(4)

    update_status_married(conn, author_id, target_id)

    await message.answer(MESSAGES[lang]["wedding_finished"].format(couple=couple_name), parse_mode="Markdown")
    conn.close()

@dp.message(Command("topcouples"))
async def cmd_topcouples(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)

    c.execute('SELECT user1_id, user2_id, wed_date FROM couples')
    rows = c.fetchall()

    if not rows:
        await message.answer(MESSAGES[lang]["top_empty"])
        conn.close()
        return

    result_text = MESSAGES[lang]["top_list_header"]

    for user1_id, user2_id, wed_date_str in rows:
        wed_date = datetime.fromisoformat(wed_date_str)
        duration = format_duration(wed_date)
        user1_name = await get_user_name(message.chat.id, user1_id)
        user2_name = await get_user_name(message.chat.id, user2_id)
        couple_name = f"{user1_name} ‚ù§Ô∏è {user2_name}"
        result_text += f"{couple_name} ‚Äî —Ä–∞–∑–æ–º –≤–∂–µ {duration}\n"

    await message.answer(result_text)
    conn.close()

@dp.message(Command("divorce"))
async def cmd_divorce(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)
    user_id = message.from_user.id

    c.execute('SELECT user1_id, user2_id FROM couples WHERE user1_id = ? OR user2_id = ?', (user_id, user_id))
    row = c.fetchone()

    if not row:
        await message.answer(MESSAGES[lang]["divorce_no_spouse"])
        conn.close()
        return

    user1_id, user2_id = row
    delete_couple(conn, user1_id, user2_id)
    update_status_free(conn, (user1_id, user2_id))

    user1_name = await get_user_name(message.chat.id, user1_id)
    user2_name = await get_user_name(message.chat.id, user2_id)

    await message.answer(MESSAGES[lang]["divorce_success"].format(user1=user1_name, user2=user2_name))
    conn.close()

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, status = get_lang_status(c, message.from_user.id)
    user_id = message.from_user.id

    if status != "–û–¥—Ä—É–∂–µ–Ω–∏–π(–∞)":
        await message.answer(MESSAGES[lang]["profile_no_marriage"])
        conn.close()
        return

    c.execute('SELECT user1_id, user2_id, wed_date FROM couples WHERE user1_id = ? OR user2_id = ?', (user_id, user_id))
    row = c.fetchone()
    if not row:
        await message.answer(MESSAGES[lang]["profile_no_marriage"])
        conn.close()
        return

    user1_id, user2_id, wed_date_str = row
    wed_date = datetime.fromisoformat(wed_date_str)
    spouse_id = user2_id if user1_id == user_id else user1_id
    spouse_name = await get_user_name(message.chat.id, spouse_id)

    profile_text = (
        MESSAGES[lang]["profile_header"] +
        MESSAGES[lang]["profile_status"].format(status=status) +
        MESSAGES[lang]["profile_married_to"].format(partner=spouse_name) +
        MESSAGES[lang]["profile_married_since"].format(since=wed_date.strftime("%d.%m.%Y"))
    )

    await message.answer(profile_text)
    conn.close()

async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="commands", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏"),
        BotCommand(command="marry", description="–û–¥—Ä—É–∂–∏—Ç–∏—Å—å –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"),
        BotCommand(command="topcouples", description="–¢–æ–ø –ø–∞—Ä"),
        BotCommand(command="divorce", description="–†–æ–∑–≤–µ–∑—Ç–∏—Å—å"),
        BotCommand(command="profile", description="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø—Ä–æ—Ñ—ñ–ª—å"),
    ]
    await bot.set_my_commands(commands)

async def main():
    await set_bot_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    keep_alive()
    asyncio.run(main())
