import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from database import (
    init_db, add_or_update_user, get_user_by_username, get_user_by_id,
    is_user_married, add_couple, remove_couple, get_couple_by_user, get_all_couples
)

API_TOKEN = "8232680735:AAG-GFL8ZOUla-OwP-0D5bDhnFpNaH6e-pU"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

pending_proposals = {}

MESSAGES = {
    "proposal_offer": "üíå @{target}, –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è –≤—ñ–¥ {proposer}! –ù–∞—Ç–∏—Å–Ω–∏ ‚ù§Ô∏è —â–æ–± –ø–æ–≥–æ–¥–∏—Ç–∏—Å—å –∞–±–æ ‚ùå —â–æ–± –≤—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å.",
    "proposal_accepted": "üéâ {couple}, —Ç–µ–ø–µ—Ä –æ–¥—Ä—É–∂–µ–Ω—ñ! –•–∞–π –∂–∏–≤–µ –ª—é–±–æ–≤! üíñ",
    "proposal_declined": "üö´ @{target} –≤—ñ–¥–º–æ–≤–∏–≤(–ª–∞) {proposer}.",
    "self_propose": "üôÖ‚Äç‚ôÄÔ∏è –ù–µ –º–æ–∂–Ω–∞ –ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Å–æ–±—ñ.",
    "already_married": "‚ö†Ô∏è –¢–∏ –≤–∂–µ –æ–¥—Ä—É–∂–µ–Ω–∏–π(–∞). –°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å —á–µ—Ä–µ–∑ /divorce.",
    "not_married": "‚ùå –¢–∏ –Ω–µ –æ–¥—Ä—É–∂–µ–Ω–∏–π(–∞).",
    "divorce_success": "üíî {user1} —Ç–∞ {user2} —Ç–µ–ø–µ—Ä —Ä–æ–∑–≤–µ–¥–µ–Ω—ñ. –ù–µ—Ö–∞–π —à–ª—è—Ö –±—É–¥–µ —Å–≤—ñ—Ç–ª–∏–º!",
    "top_empty": "ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –æ–¥—Ä—É–∂–µ–Ω–∏—Ö –ø–∞—Ä.",
    "profile_status_single": "–°—Ç–∞—Ç—É—Å: –≤—ñ–ª—å–Ω–∏–π(–∞)",
    "profile_status_married": "–°—Ç–∞—Ç—É—Å: –æ–¥—Ä—É–∂–µ–Ω–∏–π(–∞)",
    "profile_header": "üìá –ü—Ä–æ—Ñ—ñ–ª—å:\n",
    "profile_married_to": "–û–¥—Ä—É–∂–µ–Ω–∏–π(–∞) –∑: {partner}\n",
    "profile_married_since": "–û–¥—Ä—É–∂–µ–Ω—ñ –∑: {since}\n",
    "commands_list": (
        "üìú –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:\n"
        "/marry @username ‚Äî –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è üíç\n"
        "/topcouples ‚Äî —Ç–æ–ø –ø–∞—Ä ü•á\n"
        "/divorce ‚Äî —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å üíî\n"
        "/profile ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø—Ä–æ—Ñ—ñ–ª—å üïµÔ∏è‚Äç‚ôÇÔ∏è\n"
        "/commands ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üìã\n"
    ),
}

async def update_user_info(message: types.Message):
    user = message.from_user
    username = user.username or ""
    fullname = user.full_name or ""
    add_or_update_user(user.id, username, fullname)

async def get_user_display_name(user_id: int):
    user = get_user_by_id(user_id)
    if user:
        _, username, fullname, _ = user
        return f"@{username}" if username else fullname
    return f"User {user_id}"

def format_duration(start_time: datetime):
    now = datetime.now()
    diff = now - start_time
    minutes = int(diff.total_seconds() // 60)
    if minutes < 60:
        return f"{minutes} —Ö–≤–∏–ª–∏–Ω"
    hours = minutes // 60
    if hours < 24:
        return f"{hours} –≥–æ–¥–∏–Ω"
    days = hours // 24
    if days < 30:
        return f"{days} –¥–Ω—ñ–≤"
    months = days // 30
    if months < 12:
        return f"{months} –º—ñ—Å—è—Ü—ñ–≤"
    years = months // 12
    return f"{years} —Ä–æ–∫—ñ–≤"

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await update_user_info(message)
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —Ç–≤–æ—é –ø–æ–ª–æ–≤–∏–Ω–∫—É üíñ /commands –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

@dp.message(Command("commands"))
async def cmd_commands(message: types.Message):
    await message.answer(MESSAGES["commands_list"])

@dp.message(Command("marry"))
async def cmd_marry(message: types.Message):
    await update_user_info(message)
    text = message.text
    if not text or len(text.split()) < 2:
        await message.reply("–í–∫–∞–∂–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ @username, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é.")
        return

    proposer_id = message.from_user.id
    username_mention = text.split()[1].lstrip("@").lower()

    if username_mention == (message.from_user.username or "").lower():
        await message.reply(MESSAGES["self_propose"])
        return

    if is_user_married(proposer_id):
        await message.reply(MESSAGES["already_married"])
        return

    target_user = get_user_by_username(username_mention)

    if not target_user:
        # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –ø–æ user_id —É —á–∞—Ç—ñ (—è–∫—â–æ username –Ω–µ –≤ –±–∞–∑—ñ)
        # –û—Å–∫—ñ–ª—å–∫–∏ username –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø–æ–ø—Ä–æ—Å–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ —Ç—Ä–µ–±–∞ –≤—ñ–Ω —î –≤ —á–∞—Ç—ñ, –±–æ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ –π–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.
        await message.reply(f"–ù–µ –∑–Ω–∞–π—à–æ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username_mention} —É –±–∞–∑—ñ. –ü—Ä–æ—Å–∏ –π–æ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ —â–æ—Å—å –≤ —á–∞—Ç—ñ, —â–æ–± —è –π–æ–≥–æ –∑–∞–ø–∞–º'—è—Ç–∞–≤.")
        return

    target_user_id = target_user[0]
    if is_user_married(target_user_id):
        await message.reply("–¶—ñ–ª—å–æ–≤–∞ –ª—é–¥–∏–Ω–∞ –≤–∂–µ –æ–¥—Ä—É–∂–µ–Ω–∞.")
        return

    proposal_id = f"{message.chat.id}_{message.message_id}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è", callback_data=f"proposal_accept:{proposal_id}:{proposer_id}:{target_user_id}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"proposal_decline:{proposal_id}:{proposer_id}:{target_user_id}")
        ]
    ])

    proposer_name = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    target_name = f"@{username_mention}"

    await message.answer(
        MESSAGES["proposal_offer"].format(target=target_name, proposer=proposer_name),
        reply_markup=kb
    )
    pending_proposals[proposal_id] = (proposer_id, target_user_id)

@dp.callback_query(lambda c: c.data and c.data.startswith("proposal_"))
async def proposal_callback(call: types.CallbackQuery):
    data = call.data.split(":")
    action = data[0].split("_")[1]
    proposal_id = data[1]
    proposer_id = int(data[2])
    target_user_id = int(data[3])

    if proposal_id not in pending_proposals:
        await call.answer("–¶—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", show_alert=True)
        return

    if call.from_user.id != target_user_id:
        await call.answer("–¶–µ –Ω–µ –≤–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è!", show_alert=True)
        return

    if action == "accept":
        # –î–æ–¥–∞—î–º–æ –ø–∞—Ä—É
        wed_date = datetime.now().isoformat()
        add_couple(proposer_id, target_user_id, wed_date)

        proposer_name = await get_user_display_name(proposer_id)
        target_name = await get_user_display_name(target_user_id)

        couple_name = f"{target_name} —ñ {proposer_name}"
        await call.message.edit_text(MESSAGES["proposal_accepted"].format(couple=couple_name))

        # –í–µ—Å—ñ–ª—å–Ω–∏–π –º–∞—Ä–∞—Ñ–æ–Ω
        wedding_texts = [
            "üé∂ –ó–≤—É—á–∏—Ç—å –≤–µ—Å—ñ–ª—å–Ω–∏–π –º–∞—Ä—à... üé∂",
            f"–î—Ä—É–∑—ñ –π —Ä–æ–¥–∏–Ω–∞ –≤—ñ—Ç–∞—é—Ç—å {couple_name}!",
            "–ù–µ—Ö–∞–π –∂–∏—Ç—Ç—è –±—É–¥–µ –ø–æ–≤–Ω–∏–º –ª—é–±–æ–≤—ñ —Ç–∞ —â–∞—Å—Ç—è! üåπ",
            "–ü—ñ–¥–Ω—ñ–º–µ–º–æ –∫–µ–ª–∏—Ö–∏ –∑–∞ –º–æ–ª–æ–¥—è—Ç! ü•Ç",
            "–¢–∞–Ω—Ü—ñ, —Å–º—ñ—Ö —ñ —Ä–∞–¥—ñ—Å—Ç—å –∑–∞–ø–æ–≤–Ω—é—é—Ç—å —Ü–µ–π –¥–µ–Ω—å! üíÉüï∫",
            "–¶–µ–π –¥–µ–Ω—å –∑–∞–ø–∞–º‚Äô—è—Ç–∞—î—Ç—å—Å—è –Ω–∞–∑–∞–≤–∂–¥–∏! üéÜ"
        ]
        for text in wedding_texts:
            await call.message.answer(text)
            await asyncio.sleep(4)

    else:
        proposer_name = await get_user_display_name(proposer_id)
        target_name = await get_user_display_name(target_user_id)
        await call.message.edit_text(MESSAGES["proposal_declined"].format(target=target_name.strip("@"), proposer=proposer_name))

    pending_proposals.pop(proposal_id, None)
    await call.answer()

@dp.message(Command("topcouples"))
async def cmd_topcouples(message: types.Message):
    couples = get_all_couples()
    if not couples:
        await message.answer(MESSAGES["top_empty"])
        return

    result_text = "üî• –¢–æ–ø –æ–¥—Ä—É–∂–µ–Ω–∏—Ö –ø–∞—Ä:\n\n"
    for user1_id, user2_id, wed_date_str in couples:
        wed_date = datetime.fromisoformat(wed_date_str)
        duration = format_duration(wed_date)
        user1_name = await get_user_display_name(user1_id)
        user2_name = await get_user_display_name(user2_id)
        couple_name = f"{user1_name} ‚ù§Ô∏è {user2_name}"
        result_text += f"{couple_name} ‚Äî —Ä–∞–∑–æ–º –≤–∂–µ {duration}\n"

    await message.answer(result_text)

@dp.message(Command("divorce"))
async def cmd_divorce(message: types.Message):
    user_id = message.from_user.id
    if not is_user_married(user_id):
        await message.answer(MESSAGES["not_married"])
        return

    success = remove_couple(user_id)
    if success:
        await message.answer(MESSAGES["divorce_success"].format(
            user1=await get_user_display_name(user_id),
            user2="–¢–æ–π, –∑ –∫–∏–º —Ä–æ–∑—ñ–π—à–ª–∏—Å—è"
        ))
    else:
        await message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.")

@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    user_id = message.from_user.id
    user = get_user_by_id(user_id)
    if not user:
        await message.answer("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    _, username, fullname, status = user
    profile_text = MESSAGES["profile_header"]
    profile_text += f"–Ü–º'—è: {fullname}\n"
    profile_text += f"–ù—ñ–∫–Ω–µ–π–º: @{username if username else '–Ω–µ–º–∞—î'}\n"
    profile_text += f"–°—Ç–∞—Ç—É—Å: {status}\n"

    couple = get_couple_by_user(user_id)
    if couple:
        user1_id, user2_id, wed_date_str = couple
        spouse_id = user2_id if user1_id == user_id else user1_id
        spouse_name = await get_user_display_name(spouse_id)
        wed_date = datetime.fromisoformat(wed_date_str)
        profile_text += MESSAGES["profile_married_to"].format(partner=spouse_name)
        profile_text += MESSAGES["profile_married_since"].format(since=wed_date.strftime("%d.%m.%Y"))

    await message.answer(profile_text)

async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="commands", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏"),
        BotCommand(command="marry", description="–ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è"),
        BotCommand(command="topcouples", description="–¢–æ–ø –æ–¥—Ä—É–∂–µ–Ω–∏—Ö –ø–∞—Ä"),
        BotCommand(command="divorce", description="–†–æ–∑–≤–µ–∑—Ç–∏—Å—å"),
        BotCommand(command="profile", description="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø—Ä–æ—Ñ—ñ–ª—å"),
    ]
    await bot.set_my_commands(commands)

async def main():
    init_db()
    await set_bot_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
