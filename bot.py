import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from database import get_db, get_lang_status
from keep_alive import keep_alive  # —è–∫—â–æ —î —Ç–≤—ñ–π keep_alive

API_TOKEN = "8232680735:AAG-GFL8ZOUla-OwP-0D5bDhnFpNaH6e-pU"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

pending_proposals = {}

MESSAGES = {
    "uk": {
        "proposal_offer": "üíå @{target}, –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è –≤—ñ–¥ {proposer}! –ù–∞—Ç–∏—Å–Ω–∏ ‚ù§Ô∏è —â–æ–± –ø–æ–≥–æ–¥–∏—Ç–∏—Å—å –∞–±–æ ‚ùå —â–æ–± –≤—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å.",
        "proposal_accepted": "üéâ {couple}, —Ç–µ–ø–µ—Ä –æ–¥—Ä—É–∂–µ–Ω—ñ! –ù–µ—Ö–∞–π —â–∞—Å—Ç–∏—Ç—å —É –ª—é–±–æ–≤—ñ! üíñ",
        "proposal_declined": "üö´ @{target} –≤—ñ–¥–º–æ–≤–∏–≤(–ª–∞) {proposer}.",
        "self_propose": "üôÖ‚Äç‚ôÇÔ∏è –ù–µ –º–æ–∂–Ω–∞ –ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Å–æ–±—ñ.",
        "wedding_in_progress": "‚è≥ –í–µ—Å—ñ–ª–ª—è –≤–∂–µ —Ç—Ä–∏–≤–∞—î, –∑–∞—á–µ–∫–∞–π.",
        "wedding_start": "üíí –ü–æ—á–∏–Ω–∞—î–º–æ –≤–µ—Å—ñ–ª—å–Ω–µ –≥—É–ª—è–Ω–Ω—è –¥–ª—è {couple}! üéâ",
        "wedding_finished": "üéä –í–µ—Å—ñ–ª–ª—è {couple} –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –•–∞–π –∂–∏–≤–µ –ª—é–±–æ–≤! ‚ù§Ô∏è",
        "top_empty": "ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –æ–¥—Ä—É–∂–µ–Ω–∏—Ö –ø–∞—Ä.",
        "commands_list": (
            "üìú –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:\n"
            "/marry @username ‚Äî –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è üíç\n"
            "/topcouples ‚Äî —Ç–æ–ø –ø–∞—Ä ü•á\n"
            "/divorce ‚Äî —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å üíî\n"
            "/profile ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø—Ä–æ—Ñ—ñ–ª—å üïµÔ∏è‚Äç‚ôÇÔ∏è\n"
            "/commands ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üìã\n"
        ),
        "help_dm": (
            "–ü—Ä–∏–≤—ñ—Ç! –û—Å—å –º–æ—ó –∫–æ–º–∞–Ω–¥–∏:\n"
            "/marry @username ‚Äî –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è üíç\n"
            "/topcouples ‚Äî —Ç–æ–ø –ø–∞—Ä ü•á\n"
            "/divorce ‚Äî —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å üíî\n"
            "/profile ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø—Ä–æ—Ñ—ñ–ª—å üïµÔ∏è‚Äç‚ôÇÔ∏è\n"
            "/commands ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üìã\n"
            "\n–¢–µ—Ö. –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: @KR_LVXH"
        ),
        "no_spouse": "üò¢ –ù–µ–º–∞—î –æ–¥—Ä—É–∂–µ–Ω–Ω—è.",
        "divorce_no_spouse": "‚ùå –¢–∏ –Ω–µ –æ–¥—Ä—É–∂–µ–Ω–∏–π(–∞), —â–æ–± —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å.",
        "divorce_success": "üíî {user1} —Ç–∞ {user2} —Ç–µ–ø–µ—Ä —Ä–æ–∑–≤–µ–¥–µ–Ω—ñ. –ù–µ—Ö–∞–π —à–ª—è—Ö –±—É–¥–µ —Å–≤—ñ—Ç–ª–∏–º!",
        "profile_header": "üìá –ü—Ä–æ—Ñ—ñ–ª—å:\n",
        "profile_married_to": "–û–¥—Ä—É–∂–µ–Ω–∏–π(–∞) –∑: {partner}\n",
        "profile_married_since": "–û–¥—Ä—É–∂–µ–Ω—ñ –∑: {since}\n",
        "profile_status_single": "–°—Ç–∞—Ç—É—Å: –≤—ñ–ª—å–Ω–∏–π(–∞)\n",
        "profile_status_married": "–°—Ç–∞—Ç—É—Å: –æ–¥—Ä—É–∂–µ–Ω–∏–π(–∞)\n"
    }
}

async def get_user_name(chat_id: int, user_id: int):
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        if member.user.username:
            return f"@{member.user.username}"
        return member.user.full_name
    except:
        return f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}"

def format_duration(start_time: datetime):
    now = datetime.now()
    diff = now - start_time
    minutes = int(diff.total_seconds() // 60)

    if minutes < 60:
        return f"{minutes} —Ö–≤–∏–ª–∏–Ω"
    hours = minutes // 60
    if hours < 24:
        return f"{hours} –≥–æ–¥–∏–Ω"
    days = hours // 24
    if days < 30:
        return f"{days} –¥–Ω—ñ–≤"
    months = days // 30
    if months < 12:
        return f"{months} –º—ñ—Å—è—Ü—ñ–≤"
    years = months // 12
    return f"{years} —Ä–æ–∫—ñ–≤"

@dp.message(Command("start"))
async def cmd_start(message: Message):
    conn = get_db()
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)
    await message.answer(MESSAGES[lang]["help_dm"])
    conn.close()

@dp.message(Command("commands"))
async def cmd_commands(message: Message):
    conn = get_db()
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)
    await message.answer(MESSAGES[lang]["commands_list"])
    conn.close()

@dp.message(Command("marry"))
async def cmd_marry(message: Message):
    conn = get_db()
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)

    if not message.text:
        await message.reply("–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –∑ —é–∑–µ—Ä–æ–º: /marry @username")
        conn.close()
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–í–∫–∞–∂–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ @username, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é.")
        conn.close()
        return

    username = parts[1].lstrip("@").strip()
    if username.lower() == (message.from_user.username or "").lower():
        await message.reply(MESSAGES[lang]["self_propose"])
        conn.close()
        return

    proposer_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –≤ –ø–∞—Ä—ñ
    c.execute('SELECT user1_id, user2_id FROM couples WHERE user1_id = ? OR user2_id = ?', (proposer_id, proposer_id))
    if c.fetchone():
        await message.reply("–¢–∏ –≤–∂–µ –æ–¥—Ä—É–∂–µ–Ω–∏–π(–∞). –°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å —á–µ—Ä–µ–∑ /divorce.")
        conn.close()
        return

    # –®—É–∫–∞—î–º–æ user_id —Ü—ñ–ª—å–æ–≤–æ–≥–æ
    try:
        chat_members = await bot.get_chat_administrators(message.chat.id)
        target_user = next((m.user for m in chat_members if m.user.username and m.user.username.lower() == username.lower()), None)
    except:
        target_user = None

    if not target_user:
        await message.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç—ñ.")
        conn.close()
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ, —è–∫—â–æ —ó—Ö —Ç–∞–º –Ω–µ–º–∞
    for user in [message.from_user, target_user]:
        c.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user.id, user.username or ""))

    conn.commit()

    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    proposal_id = f"{message.chat.id}_{message.message_id}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è", callback_data=f"proposal_accept:{proposal_id}:{proposer_id}:{target_user.id}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"proposal_decline:{proposal_id}:{proposer_id}:{target_user.id}")
        ]
    ])

    text = MESSAGES[lang]["proposal_offer"].format(target=target_user.username or target_user.full_name, proposer=message.from_user.full_name)
    await message.answer(text, reply_markup=kb)
    pending_proposals[proposal_id] = (proposer_id, target_user.id)

    conn.close()

@dp.callback_query(lambda c: c.data and c.data.startswith("proposal_"))
async def proposal_callback(call: CallbackQuery):
    data = call.data.split(":")
    action = data[0].split("_")[1]
    proposal_id = data[1]
    proposer_id = int(data[2])
    target_user_id = int(data[3])

    conn = get_db()
    c = conn.cursor()
    lang, _ = get_lang_status(c, call.from_user.id)

    if call.from_user.id != target_user_id:
        await call.answer("–¶–µ –Ω–µ –≤–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è!", show_alert=True)
        conn.close()
        return

    if proposal_id not in pending_proposals:
        await call.answer("–¶—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", show_alert=True)
        conn.close()
        return

    if action == "accept":
        user1_id = min(proposer_id, call.from_user.id)
        user2_id = max(proposer_id, call.from_user.id)
        now_str = datetime.now().isoformat()
        try:
            c.execute('INSERT INTO couples (user1_id, user2_id, wed_date) VALUES (?, ?, ?)', (user1_id, user2_id, now_str))
            c.execute("UPDATE users SET status = '–û–¥—Ä—É–∂–µ–Ω–∏–π(–∞)' WHERE user_id IN (?, ?)", (user1_id, user2_id))
            conn.commit()
        except sqlite3.IntegrityError:
            pass

        proposer_name = await get_user_name(call.message.chat.id, proposer_id)
        target_name = await get_user_name(call.message.chat.id, call.from_user.id)
        couple_name = f"{proposer_name} —ñ {target_name}"

        await call.message.edit_text(MESSAGES[lang]["proposal_accepted"].format(couple=couple_name))

        # –ü—ñ—Å–ª—è 5 —Å–µ–∫—É–Ω–¥ –≤–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤–µ—Å—ñ–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
        await asyncio.sleep(5)
        wedding_texts = [
            "üé∂ –ó–≤—É—á–∏—Ç—å –≤–µ—Å—ñ–ª—å–Ω–∏–π –º–∞—Ä—à... üé∂",
            f"–î—Ä—É–∑—ñ —ñ —Ä–æ–¥–∏–Ω–∞ –≤—ñ—Ç–∞—é—Ç—å {couple_name}!",
            "–ù–µ—Ö–∞–π –∂–∏—Ç—Ç—è –±—É–¥–µ –ø–æ–≤–Ω–∏–º –ª—é–±–æ–≤—ñ —Ç–∞ —â–∞—Å—Ç—è! üåπ",
            "–ü—ñ–¥–Ω—ñ–º–µ–º–æ –∫–µ–ª–∏—Ö–∏ –∑–∞ –º–æ–ª–æ–¥—è—Ç! ü•Ç",
            "–¢–∞–Ω—Ü—ñ, —Å–º—ñ—Ö —ñ —Ä–∞–¥—ñ—Å—Ç—å –∑–∞–ø–æ–≤–Ω—é—é—Ç—å —Ü–µ–π –¥–µ–Ω—å! üíÉüï∫",
            "–¶–µ–π –¥–µ–Ω—å –∑–∞–ø–∞–º‚Äô—è—Ç–∞—î—Ç—å—Å—è –Ω–∞–∑–∞–≤–∂–¥–∏! üéÜ"
        ]
        for text in wedding_texts:
            await call.message.answer(text)
            await asyncio.sleep(4)

        pending_proposals.pop(proposal_id, None)

    else:  # decline
        proposer_name = await get_user_name(call.message.chat.id, proposer_id)
        target_name = await get_user_name(call.message.chat.id, call.from_user.id)
        text = MESSAGES[lang]["proposal_declined"].format(target=target_name, proposer=proposer_name)
        await call.message.edit_text(text)
        pending_proposals.pop(proposal_id, None)

    await call.answer()
    conn.close()

@dp.message(Command("topcouples"))
async def cmd_topcouples(message: Message):
    conn = get_db()
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)

    c.execute('SELECT user1_id, user2_id, wed_date FROM couples')
    rows = c.fetchall()

    if not rows:
        await message.answer(MESSAGES[lang]["top_empty"])
        conn.close()
        return

    result_text = "üî• –¢–æ–ø –æ–¥—Ä—É–∂–µ–Ω–∏—Ö –ø–∞—Ä:\n\n"
    for user1_id, user2_id, wed_date_str in rows:
        wed_date = datetime.fromisoformat(wed_date_str)
        duration = format_duration(wed_date)
        user1_name = await get_user_name(message.chat.id, user1_id)
        user2_name = await get_user_name(message.chat.id, user2_id)
        couple_name = f"{user1_name} ‚ù§Ô∏è {user2_name}"
        result_text += f"{couple_name} ‚Äî —Ä–∞–∑–æ–º –≤–∂–µ {duration}\n"

    await message.answer(result_text)
    conn.close()

@dp.message(Command("divorce"))
async def cmd_divorce(message: Message):
    conn = get_db()
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)
    user_id = message.from_user.id

    c.execute('SELECT user1_id, user2_id FROM couples WHERE user1_id = ? OR user2_id = ?', (user_id, user_id))
    row = c.fetchone()

    if not row:
        await message.answer(MESSAGES[lang]["divorce_no_spouse"])
        conn.close()
        return

    user1_id, user2_id = row
    c.execute('DELETE FROM couples WHERE user1_id = ? AND user2_id = ?', (user1_id, user2_id))
    c.execute("UPDATE users SET status = '–í—ñ–ª—å–Ω–∏–π(–∞)' WHERE user_id IN (?, ?)", (user1_id, user2_id))
    conn.commit()

    user1_name = await get_user_name(message.chat.id, user1_id)
    user2_name = await get_user_name(message.chat.id, user2_id)

    await message.answer(MESSAGES[lang]["divorce_success"].format(user1=user1_name, user2=user2_name))
    conn.close()

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    conn = get_db()
    c = conn.cursor()
    lang, status = get_lang_status(c, message.from_user.id)
    user_id = message.from_user.id

    c.execute('SELECT user1_id, user2_id, wed_date FROM couples WHERE user1_id = ? OR user2_id = ?', (user_id, user_id))
    row = c.fetchone()

    if row:
        user1_id, user2_id, wed_date_str = row
        wed_date = datetime.fromisoformat(wed_date_str)
        spouse_id = user2_id if user1_id == user_id else user1_id
        spouse_name = await get_user_name(message.chat.id, spouse_id)

        profile_text = (
            MESSAGES[lang]["profile_header"] +
            MESSAGES[lang]["profile_status_married"] +
            MESSAGES[lang]["profile_married_to"].format(partner=spouse_name) +
            MESSAGES[lang]["profile_married_since"].format(since=wed_date.strftime("%d.%m.%Y"))
        )
    else:
        profile_text = (
            MESSAGES[lang]["profile_header"] +
            MESSAGES[lang]["profile_status_single"]
        )

    await message.answer(profile_text)
    conn.close()

async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="commands", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏"),
        BotCommand(command="marry", description="–ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è"),
        BotCommand(command="topcouples", description="–¢–æ–ø –æ–¥—Ä—É–∂–µ–Ω–∏—Ö –ø–∞—Ä"),
        BotCommand(command="divorce", description="–†–æ–∑–≤–µ–∑—Ç–∏—Å—å"),
        BotCommand(command="profile", description="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø—Ä–æ—Ñ—ñ–ª—å"),
    ]
    await bot.set_my_commands(commands)

async def main():
    # –í–ò–î–ê–õ–Ø–Ñ–ú–û WEBHOOK (—â–æ–± –Ω–µ –±—É–ª–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –ø—Ä–∏ polling)
    await bot.delete_webhook(drop_pending_updates=True)
    await set_bot_commands()
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling

if __name__ == "__main__":
    keep_alive()
    asyncio.run(main())
