import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, BotCommand
from database import get_db_connection
from keep_alive import keep_alive  # –Ü–º–ø–æ—Ä—Ç Flask-keep_alive

API_TOKEN = "8232680735:AAG-GFL8ZOUla-OwP-0D5bDhnFpNaH6e-pU"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

MESSAGES = {
    "uk": {
        "top_empty": "ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞—Ä—É—á–µ–Ω–∏—Ö –ø–∞—Ä.",
        "commands_list": (
            "üìú –û—Å—å –º–æ—ó –∫–æ–º–∞–Ω–¥–∏:\n"
            "/marry - –æ–¥—Ä—É–∂–∏—Ç–∏—Å—å üë∞ü§µ\n"
            "/topcouples - —Ç–æ–ø –ø–∞—Ä ü•á\n"
            "/divorce - —Ä–æ–∑—ñ–π—Ç–∏—Å—å üíî\n"
            "/profile - –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø—Ä–æ—Ñ—ñ–ª—å üïµÔ∏è‚Äç‚ôÇÔ∏è\n"
            "/commands - —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üìã\n"
        ),
        "help_dm": (
            "–í—ñ—Ç–∞—é! –û—Å—å –º–æ—ó –∫–æ–º–∞–Ω–¥–∏:\n"
            "/marry ‚Äî –æ–¥—Ä—É–∂–∏—Ç–∏—Å—å üë∞ü§µ\n"
            "/topcouples ‚Äî —Ç–æ–ø –ø–∞—Ä ü•á\n"
            "/divorce ‚Äî —Ä–æ–∑—ñ–π—Ç–∏—Å—å üíî\n"
            "/profile ‚Äî —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å üïµÔ∏è‚Äç‚ôÇÔ∏è\n"
            "/commands ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üìã\n"
            "\n–¢–µ—Ö. –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: @KR_LVXH"
        ),
        "already_married": "–í–∏ –≤–∂–µ –≤ –ø–∞—Ä—ñ, —Å–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑—ñ–π–¥—ñ—Ç—å—Å—è —á–µ—Ä–µ–∑ /divorce.",
        "marry_start": "üíí –ü–æ—á–∏–Ω–∞—î–º–æ –≤–µ—Å—ñ–ª—å–Ω–µ –≥—É–ª—è–Ω–Ω—è –¥–ª—è {couple}! üéâ",
        "marry_success": "üéâ {couple}, –≤–∏ —Ç–µ–ø–µ—Ä –æ–¥—Ä—É–∂–µ–Ω—ñ! –ù–µ—Ö–∞–π —â–∞—Å—Ç–∏—Ç—å! üíñ",
        "no_spouse": "üò¢ –¢–∏ —â–µ –Ω–µ –æ–¥—Ä—É–∂–µ–Ω–∏–π(–∞).",
        "divorce_no_spouse": "‚ùå –¢–∏ –Ω–µ –æ–¥—Ä—É–∂–µ–Ω–∏–π(–∞), —â–æ–± —Ä–æ–∑—ñ–π—Ç–∏—Å—å.",
        "divorce_success": "üíî {user1} —Ç–∞ {user2} —Ç–µ–ø–µ—Ä —Ä–æ–∑–≤–µ–¥–µ–Ω—ñ. –ù–µ—Ö–∞–π –Ω–æ–≤–∏–π —à–ª—è—Ö –±—É–¥–µ —Å–≤—ñ—Ç–ª–∏–º!",
        "profile_no_marriage": "üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –æ–¥—Ä—É–∂–µ–Ω–∏–º. –°–ø–æ—á–∞—Ç–∫—É –æ–¥—Ä—É–∂–∏—Å—å —á–µ—Ä–µ–∑ /marry.",
        "profile_header": "üìá –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:\n",
        "profile_married_to": "–û–¥—Ä—É–∂–µ–Ω–∏–π(–∞) –∑: {partner}\n",
        "profile_married_since": "–û–¥—Ä—É–∂–µ–Ω—ñ –∑: {since}\n",
        "profile_username": "–ù—ñ–∫–Ω–µ–π–º: @{username}\n",
        "profile_activity": "–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É –≥—Ä—É–ø—ñ: {active} —Ö–≤–∏–ª–∏–Ω\n"
    }
}

async def get_user_name(chat_id: int, user_id: int):
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.user.full_name
    except:
        return f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}"

def format_duration(start_time: datetime):
    now = datetime.now()
    diff = now - start_time
    minutes = int(diff.total_seconds() // 60)
    if minutes < 60:
        return f"{minutes} —Ö–≤–∏–ª–∏–Ω"
    hours = minutes // 60
    if hours < 24:
        return f"{hours} –≥–æ–¥–∏–Ω"
    days = hours // 24
    if days < 30:
        return f"{days} –¥–Ω—ñ–≤"
    months = days // 30
    if months < 12:
        return f"{months} –º—ñ—Å—è—Ü—ñ–≤"
    years = months // 12
    return f"{years} —Ä–æ–∫—ñ–≤"

@dp.message(Command("start"))
async def cmd_start(message: Message):
    lang = "uk"
    await message.answer(MESSAGES[lang]["help_dm"])

@dp.message(Command("commands"))
async def cmd_commands(message: Message):
    lang = "uk"
    await message.answer(MESSAGES[lang]["commands_list"])

@dp.message(Command("marry"))
async def cmd_marry(message: Message):
    conn = get_db_connection()
    c = conn.cursor()
    user_id = message.from_user.id
    chat_id = message.chat.id

    c.execute('SELECT user1_id, user2_id FROM couples WHERE user1_id = ? OR user2_id = ?', (user_id, user_id))
    if c.fetchone():
        await message.reply(MESSAGES["uk"]["already_married"])
        conn.close()
        return

    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ ‚Äî –æ–¥—Ä—É–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–∞–º–∏–º —Å–æ–±–æ—é (–ø–æ–ø—Ä–∞–≤–∏—à –ø—ñ–¥ —Ä–µ–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ü–µ—Å, –¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è)
    wed_date = datetime.now().isoformat()
    c.execute('INSERT INTO couples (user1_id, user2_id, wed_date) VALUES (?, ?, ?)', (user_id, user_id, wed_date))
    c.execute('INSERT OR IGNORE INTO users (user_id, status) VALUES (?, ?)', (user_id, "–û–¥—Ä—É–∂–µ–Ω–∏–π(–∞)"))
    c.execute("UPDATE users SET status = '–û–¥—Ä—É–∂–µ–Ω–∏–π(–∞)' WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

    user_name = await get_user_name(chat_id, user_id)
    couple_name = f"{user_name} ‚ù§Ô∏è {user_name}"

    await message.answer(MESSAGES["uk"]["marry_start"].format(couple=couple_name))
    await asyncio.sleep(5)  # –ó–∞—Ç—Ä–∏–º–∫–∞ 5 —Å–µ–∫—É–Ω–¥
    await message.answer(MESSAGES["uk"]["marry_success"].format(couple=couple_name))

@dp.message(Command("topcouples"))
async def cmd_topcouples(message: Message):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute('SELECT user1_id, user2_id, wed_date FROM couples')
    rows = c.fetchall()
    if not rows:
        await message.answer(MESSAGES["uk"]["top_empty"])
        conn.close()
        return
    result_text = "üî• –¢–æ–ø –æ–¥—Ä—É–∂–µ–Ω–∏—Ö –ø–∞—Ä:\n\n"
    for user1_id, user2_id, wed_date_str in rows:
        wed_date = datetime.fromisoformat(wed_date_str)
        duration = format_duration(wed_date)
        user1_name = await get_user_name(message.chat.id, user1_id)
        user2_name = await get_user_name(message.chat.id, user2_id)
        couple_name = f"{user1_name} ‚ù§Ô∏è {user2_name}"
        result_text += f"{couple_name} ‚Äî —Ä–∞–∑–æ–º –≤–∂–µ {duration}\n"
    await message.answer(result_text)
    conn.close()

@dp.message(Command("divorce"))
async def cmd_divorce(message: Message):
    conn = get_db_connection()
    c = conn.cursor()
    user_id = message.from_user.id

    c.execute('SELECT user1_id, user2_id FROM couples WHERE user1_id = ? OR user2_id = ?', (user_id, user_id))
    row = c.fetchone()

    if not row:
        await message.answer(MESSAGES["uk"]["divorce_no_spouse"])
        conn.close()
        return

    user1_id, user2_id = row
    c.execute('DELETE FROM couples WHERE user1_id = ? AND user2_id = ?', (user1_id, user2_id))
    c.execute("UPDATE users SET status = '–í—ñ–ª—å–Ω–∏–π(–∞)' WHERE user_id IN (?, ?)", (user1_id, user2_id))
    conn.commit()

    user1_name = await get_user_name(message.chat.id, user1_id)
    user2_name = await get_user_name(message.chat.id, user2_id)

    await message.answer(MESSAGES["uk"]["divorce_success"].format(user1=user1_name, user2=user2_name))
    conn.close()

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    conn = get_db_connection()
    c = conn.cursor()
    user_id = message.from_user.id
    chat_id = message.chat.id

    c.execute('SELECT lang, status FROM users WHERE user_id = ?', (user_id,))
    row = c.fetchone()
    lang = row[0] if row else "uk"
    status = row[1] if row else "–í—ñ–ª—å–Ω–∏–π(–∞)"

    if status != "–û–¥—Ä—É–∂–µ–Ω–∏–π(–∞)":
        await message.answer(MESSAGES[lang]["profile_no_marriage"])
        conn.close()
        return

    c.execute('SELECT user1_id, user2_id, wed_date FROM couples WHERE user1_id = ? OR user2_id = ?', (user_id, user_id))
    row = c.fetchone()
    if not row:
        await message.answer(MESSAGES[lang]["profile_no_marriage"])
        conn.close()
        return

    user1_id, user2_id, wed_date_str = row
    wed_date = datetime.fromisoformat(wed_date_str)
    spouse_id = user2_id if user1_id == user_id else user1_id

    spouse_name = await get_user_name(chat_id, spouse_id)
    member = await bot.get_chat_member(chat_id, user_id)
    username = member.user.username or "–Ω–µ–º–∞—î"
    join_date = member.joined_date or datetime.now()
    active_minutes = int((datetime.now() - join_date).total_seconds() // 60)

    profile_text = (
        MESSAGES[lang]["profile_header"] +
        MESSAGES[lang]["profile_username"].format(username=username) +
        MESSAGES[lang]["profile_activity"].format(active=active_minutes) +
        MESSAGES[lang]["profile_married_to"].format(partner=spouse_name) +
        MESSAGES[lang]["profile_married_since"].format(since=wed_date.strftime("%d.%m.%Y"))
    )

    await message.answer(profile_text)
    conn.close()

async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="commands", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏"),
        BotCommand(command="marry", description="–û–¥—Ä—É–∂–∏—Ç–∏—Å—å"),
        BotCommand(command="topcouples", description="–¢–æ–ø –ø–∞—Ä"),
        BotCommand(command="divorce", description="–†–æ–∑—ñ–π—Ç–∏—Å—å"),
        BotCommand(command="profile", description="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø—Ä–æ—Ñ—ñ–ª—å"),
    ]
    await bot.set_my_commands(commands)

async def main():
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask-—Å–µ—Ä–≤–µ—Ä —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    await set_bot_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
