import asyncio
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from flask import Flask
from threading import Thread

# ----------------- 1. KEEP ALIVE -----------------
app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î 24/7 üî•"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()
# --------------------------------------------------

API_TOKEN = "8232680735:AAG-GFL8ZOUla-OwP-0D5bDhnFpNaH6e-pU"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

pending_proposals = {}  # proposal_id -> (proposer_id, proposee_username)

MESSAGES = {
    "uk": {
        "proposal_offer": "üíå {target}, –≤–∞–º —Ä–æ–±–ª—è—Ç—å –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è –≤—ñ–¥ {proposer}!\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚úÖ —è–∫—â–æ –∑–≥–æ–¥–Ω—ñ, –∞–±–æ ‚ùå —è–∫—â–æ –Ω—ñ.",
        "proposal_accepted": "üéâ {couple}, –≤–∏ —Ç–µ–ø–µ—Ä –∑–∞—Ä—É—á–µ–Ω—ñ! –ì–æ—Ç—É–π—Ç–µ—Å—è –¥–æ –≤–µ–ª–∏–∫–æ–≥–æ —Å–≤—è—Ç–∞! üíñ",
        "proposal_declined": "üö´ {target} –≤—ñ–¥–º–æ–≤–∏–≤(–ª–∞) {proposer}.",
        "self_propose": "üôÖ‚Äç‚ôÇÔ∏è –ù–µ –º–æ–∂–Ω–∞ –ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Å–æ–±—ñ.",
        "not_engaged_for_marry": "üò¢ –í–∏ —â–µ –Ω–µ –∑–∞—Ä—É—á–µ–Ω—ñ, —â–æ–± –ø–æ—á–∞—Ç–∏ –≤–µ—Å—ñ–ª–ª—è!",
        "wedding_in_progress": "‚è≥ –í–µ—Å—ñ–ª–ª—è –≤–∂–µ —Ç—Ä–∏–≤–∞—î, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ.",
        "wedding_start": "üíí –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –≤–µ—Å—ñ–ª—å–Ω–µ –≥—É–ª—è–Ω–Ω—è –¥–ª—è {couple}! üéâ",
        "wedding_finished": "üéä –í–µ—Å—ñ–ª–ª—è {couple} –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –•–∞–π –∂–∏–≤–µ –ª—é–±–æ–≤! ‚ù§Ô∏è",
        "top_empty": "ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞—Ä—É—á–µ–Ω–∏—Ö –ø–∞—Ä.",
        "commands_list": (
            "üìú –û—Å—å —â–æ —è –≤–º—ñ—é:\n"
            "/propose - –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è üíç\n"
            "/marry - –ø–æ—á–∞—Ç–∏ –≤–µ—Å—ñ–ª–ª—è –¥–ª—è –∑–∞—Ä—É—á–µ–Ω–∏—Ö –ø–∞—Ä üë∞ü§µ\n"
            "/topcouples - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –ø–∞—Ä —ñ —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É —Ä–∞–∑–æ–º ü•á\n"
            "/spouse - –ø–æ–∫–∞–∑–∞—Ç–∏ –∑ –∫–∏–º –≤–∏ –æ–¥—Ä—É–∂–µ–Ω—ñ üíë\n"
            "/divorce - —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å –∑—ñ —Å–≤–æ—î—é –ø–æ–ª–æ–≤–∏–Ω–∫–æ—é üíî\n"
            "/profile - –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å üïµÔ∏è‚Äç‚ôÇÔ∏è\n"
            "/commands - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üìã\n"
        ),
        "help_dm": (
            "–í—ñ—Ç–∞–Ω–Ω—è! –û—Å—å —â–æ —è –≤–º—ñ—é:\n"
            "/propose ‚Äî –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é üíå\n"
            "/marry ‚Äî –ø–æ—á–∞—Ç–∏ –≤–µ—Å—ñ–ª–ª—è üë∞ü§µ\n"
            "/topcouples ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –ø–∞—Ä ü•á\n"
            "/spouse ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∑ –∫–∏–º –≤–∏ –æ–¥—Ä—É–∂–µ–Ω—ñ üíë\n"
            "/divorce ‚Äî —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å üíî\n"
            "/profile ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å üïµÔ∏è‚Äç‚ôÇÔ∏è\n"
            "/commands ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üìã\n"
            "\n–¢–µ—Ö. –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: @KR_LVXH"
        ),
        "proposal_sent": "‚úÖ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        "no_spouse": "üò¢ –í–∏ —â–µ –Ω–µ –æ–¥—Ä—É–∂–µ–Ω—ñ.",
        "your_spouse": "üíñ –í–∏ –æ–¥—Ä—É–∂–µ–Ω—ñ –∑ {partner}.",
        "divorce_no_spouse": "‚ùå –í–∏ –Ω–µ –æ–¥—Ä—É–∂–µ–Ω—ñ, —â–æ–± —Ä–æ–∑–≤–µ–∑—Ç–∏—Å—å.",
        "divorce_success": "üíî {user1} —Ç–∞ {user2} —Ç–µ–ø–µ—Ä —Ä–æ–∑–≤–µ–¥–µ–Ω—ñ. –ù–µ—Ö–∞–π —à–ª—è—Ö –±—É–¥–µ —Å–≤—ñ—Ç–ª–∏–º —ñ –Ω–æ–≤–∏–º!",
        "profile_no_marriage": "üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –æ–¥—Ä—É–∂–µ–Ω–∏–º. –°–ø–µ—Ä—à—É –æ–¥—Ä—É–∂—ñ—Ç—å—Å—è —á–µ—Ä–µ–∑ /marry.",
        "profile_header": "üìá –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n",
        "profile_status": "–°—Ç–∞—Ç—É—Å: {status}\n",
        "profile_married_to": "–û–¥—Ä—É–∂–µ–Ω–∏–π(–∞) –∑: {partner}\n",
        "profile_married_since": "–û–¥—Ä—É–∂–µ–Ω—ñ –∑: {since}\n"
    }
}

def get_db(chat_id: int):
    db_name = f"db_group_{chat_id}.db"
    conn = sqlite3.connect(db_name)
    c = conn.cursor()

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–∞—Ä, —è–∫—â–æ –Ω–µ–º–∞
    c.execute("""
    CREATE TABLE IF NOT EXISTS couples (
        user1_id INTEGER NOT NULL,
        user2_id INTEGER NOT NULL,
        wed_date TEXT NOT NULL,
        PRIMARY KEY (user1_id, user2_id)
    )
    """)

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é —é–∑–µ—Ä—ñ–≤, —è–∫—â–æ –Ω–µ–º–∞
    c.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        lang TEXT DEFAULT 'uk'
    )
    """)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ–ª–æ–Ω–∫–∞ status, —è–∫—â–æ –Ω–µ–º–∞ ‚Äî –¥–æ–¥–∞—î–º–æ
    c.execute("PRAGMA table_info(users)")
    columns = [row[1] for row in c.fetchall()]
    if "status" not in columns:
        c.execute("ALTER TABLE users ADD COLUMN status TEXT DEFAULT '–í—ñ–ª—å–Ω–∏–π(–∞)'")

    conn.commit()
    return conn

def get_lang_status(cursor, user_id: int):
    cursor.execute("SELECT lang, status FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        lang = row[0] if row[0] else "uk"
        status = row[1] if row[1] else "–í—ñ–ª—å–Ω–∏–π(–∞)"
        return lang, status
    return "uk", "–í—ñ–ª—å–Ω–∏–π(–∞)"

async def get_user_name(chat_id: int, user_id: int):
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.user.full_name
    except:
        return f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}"

def format_duration(start_time: datetime):
    now = datetime.now()
    diff = now - start_time
    minutes = int(diff.total_seconds() // 60)

    if minutes < 60:
        return f"{minutes} —Ö–≤–∏–ª–∏–Ω"
    hours = minutes // 60
    if hours < 24:
        return f"{hours} –≥–æ–¥–∏–Ω"
    days = hours // 24
    if days < 30:
        return f"{days} –¥–Ω—ñ–≤"
    months = days // 30
    if months < 12:
        return f"{months} –º—ñ—Å—è—Ü—ñ–≤"
    years = months // 12
    return f"{years} —Ä–æ–∫—ñ–≤"

@dp.message(Command("start"))
async def cmd_start(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)
    await message.answer(MESSAGES[lang]["help_dm"])
    conn.close()

@dp.message(Command("commands"))
async def cmd_commands(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)
    await message.answer(MESSAGES[lang]["commands_list"])
    conn.close()

@dp.message(Command("propose"))
async def cmd_propose(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)

    if not message.text:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑–æ–º –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.")
        conn.close()
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–í–∫–∞–∂–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ @username, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é.")
        conn.close()
        return

    username = parts[1].lstrip("@").strip()
    if username.lower() == (message.from_user.username or "").lower():
        await message.reply(MESSAGES[lang]["self_propose"])
        conn.close()
        return

    proposal_id = f"{message.chat.id}_{message.message_id}"
    proposer = message.from_user

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ", callback_data=f"proposal_accept:{proposal_id}:{proposer.id}:{username}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"proposal_decline:{proposal_id}:{proposer.id}:{username}")
        ]
    ])

    text = MESSAGES[lang]["proposal_offer"].format(target=f"@{username}", proposer=proposer.full_name)
    await message.answer(text, reply_markup=kb)
    pending_proposals[proposal_id] = (proposer.id, username)
    await message.reply(MESSAGES[lang]["proposal_sent"])
    conn.close()

@dp.callback_query(lambda c: c.data and c.data.startswith("proposal_"))
async def proposal_callback(call: CallbackQuery):
    data = call.data.split(":")
    action = data[0].split("_")[1]
    proposal_id = data[1]
    proposer_id = int(data[2])
    username = data[3]

    conn = get_db(call.message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, call.from_user.id)

    if call.from_user.username != username:
        await call.answer("–¶–µ –Ω–µ –≤–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è!", show_alert=True)
        conn.close()
        return

    if proposal_id not in pending_proposals:
        await call.answer("–¶—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞.", show_alert=True)
        conn.close()
        return

    if action == "accept":
        user1_id = min(proposer_id, call.from_user.id)
        user2_id = max(proposer_id, call.from_user.id)
        now_str = datetime.now().isoformat()
        try:
            c.execute('INSERT INTO couples (user1_id, user2_id, wed_date) VALUES (?, ?, ?)', (user1_id, user2_id, now_str))
            c.execute("INSERT OR REPLACE INTO users (user_id, lang, status) VALUES (?, COALESCE((SELECT lang FROM users WHERE user_id=?), 'uk'), ?)", (user1_id, user1_id, "–ó–∞—Ä—É—á–µ–Ω–∏–π(–∞)"))
            c.execute("INSERT OR REPLACE INTO users (user_id, lang, status) VALUES (?, COALESCE((SELECT lang FROM users WHERE user_id=?), 'uk'), ?)", (user2_id, user2_id, "–ó–∞—Ä—É—á–µ–Ω–∏–π(–∞)"))
            conn.commit()
        except sqlite3.IntegrityError:
            pass

        proposer_name = await get_user_name(call.message.chat.id, proposer_id)
        target_name = await get_user_name(call.message.chat.id, call.from_user.id)
        couple_name = f"[{target_name}](tg://user?id={call.from_user.id}) —ñ [{proposer_name}](tg://user?id={proposer_id})"
        text = MESSAGES[lang]["proposal_accepted"].format(couple=couple_name)
        await call.message.edit_text(text, parse_mode="Markdown")
        pending_proposals.pop(proposal_id, None)
    else:
        proposer_name = await get_user_name(call.message.chat.id, proposer_id)
        text = MESSAGES[lang]["proposal_declined"].format(target=call.from_user.full_name, proposer=proposer_name)
        await call.message.edit_text(text)
        pending_proposals.pop(proposal_id, None)

    await call.answer()
    conn.close()

@dp.message(Command("marry"))
async def cmd_marry(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)
    author_id = message.from_user.id

    c.execute('SELECT user1_id, user2_id, wed_date FROM couples WHERE user1_id = ? OR user2_id = ?', (author_id, author_id))
    result = c.fetchone()

    if not result:
        await message.reply(MESSAGES[lang]["not_engaged_for_marry"])
        conn.close()
        return

    if getattr(dp, "marriage_active", False):
        await message.reply(MESSAGES[lang]["wedding_in_progress"])
        conn.close()
        return

    dp.marriage_active = True
    user1_id, user2_id, wed_date = result

    user1_name = await get_user_name(message.chat.id, user1_id)
    user2_name = await get_user_name(message.chat.id, user2_id)
    couple_name = f"[{user1_name}](tg://user?id={user1_id}) —ñ [{user2_name}](tg://user?id={user2_id})"

    await message.answer(MESSAGES[lang]["wedding_start"].format(couple=couple_name), parse_mode="Markdown")

    wedding_messages = [
        "üé∂ –ó–≤—É—á–∏—Ç—å –≤–µ—Å—ñ–ª—å–Ω–∏–π –º–∞—Ä—à... üé∂",
        f"–î—Ä—É–∑—ñ —Ç–∞ —Ä–æ–¥–∏–Ω–∞ –∑—ñ–±—Ä–∞–ª–∏—Å—è, —â–æ–± –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏ {couple_name}!",
        "–ù–µ—Ö–∞–π –≤–∞—à–µ –∂–∏—Ç—Ç—è –±—É–¥–µ —Å–ø–æ–≤–Ω–µ–Ω–µ –ª—é–±–æ–≤—ñ —Ç–∞ —â–∞—Å—Ç—è! üåπ",
        "–ü—ñ–¥–Ω—ñ–º–µ–º–æ –∫–µ–ª–∏—Ö–∏ –∑–∞ –º–æ–ª–æ–¥—è—Ç! ü•Ç",
        "–¢–∞–Ω—Ü—ñ, —Å–º—ñ—Ö —ñ —Ä–∞–¥—ñ—Å—Ç—å –∑–∞–ø–æ–≤–Ω—é—é—Ç—å —Ü–µ–π –¥–µ–Ω—å! üíÉüï∫",
        "–ù–µ—Ö–∞–π —Ü–µ–π –¥–µ–Ω—å –∑–∞–ø–∞–º‚Äô—è—Ç–∞—î—Ç—å—Å—è –Ω–∞–∑–∞–≤–∂–¥–∏! üéÜ"
    ]

    for msg_text in wedding_messages:
        await message.answer(msg_text, parse_mode="Markdown")
        await asyncio.sleep(4)

    c.execute("UPDATE users SET status = '–û–¥—Ä—É–∂–µ–Ω–∏–π(–∞)' WHERE user_id IN (?, ?)", (user1_id, user2_id))
    conn.commit()

    dp.marriage_active = False
    await message.answer(MESSAGES[lang]["wedding_finished"].format(couple=couple_name), parse_mode="Markdown")
    conn.close()

@dp.message(Command("topcouples"))
async def cmd_topcouples(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)

    c.execute('SELECT user1_id, user2_id, wed_date FROM couples')
    rows = c.fetchall()

    if not rows:
        await message.answer(MESSAGES[lang]["top_empty"])
        conn.close()
        return

    result_text = "üî• –¢–æ–ø –∑–∞—Ä—É—á–µ–Ω–∏—Ö –ø–∞—Ä:\n\n"

    for user1_id, user2_id, wed_date_str in rows:
        wed_date = datetime.fromisoformat(wed_date_str)
        duration = format_duration(wed_date)
        user1_name = await get_user_name(message.chat.id, user1_id)
        user2_name = await get_user_name(message.chat.id, user2_id)
        couple_name = f"{user1_name} ‚ù§Ô∏è {user2_name}"
        result_text += f"{couple_name} ‚Äî —Ä–∞–∑–æ–º –≤–∂–µ {duration}\n"

    await message.answer(result_text)
    conn.close()

@dp.message(Command("spouse"))
async def cmd_spouse(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)
    user_id = message.from_user.id

    c.execute('SELECT user1_id, user2_id FROM couples WHERE user1_id = ? OR user2_id = ?', (user_id, user_id))
    row = c.fetchone()

    if not row:
        await message.answer(MESSAGES[lang]["no_spouse"])
        conn.close()
        return

    spouse_id = row[1] if row[0] == user_id else row[0]
    spouse_name = await get_user_name(message.chat.id, spouse_id)

    await message.answer(MESSAGES[lang]["your_spouse"].format(partner=spouse_name))
    conn.close()

@dp.message(Command("divorce"))
async def cmd_divorce(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, _ = get_lang_status(c, message.from_user.id)
    user_id = message.from_user.id

    c.execute('SELECT user1_id, user2_id FROM couples WHERE user1_id = ? OR user2_id = ?', (user_id, user_id))
    row = c.fetchone()

    if not row:
        await message.answer(MESSAGES[lang]["divorce_no_spouse"])
        conn.close()
        return

    user1_id, user2_id = row
    c.execute('DELETE FROM couples WHERE user1_id = ? AND user2_id = ?', (user1_id, user2_id))
    c.execute("UPDATE users SET status = '–í—ñ–ª—å–Ω–∏–π(–∞)' WHERE user_id IN (?, ?)", (user1_id, user2_id))
    conn.commit()

    user1_name = await get_user_name(message.chat.id, user1_id)
    user2_name = await get_user_name(message.chat.id, user2_id)

    await message.answer(MESSAGES[lang]["divorce_success"].format(user1=user1_name, user2=user2_name))
    conn.close()

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    conn = get_db(message.chat.id)
    c = conn.cursor()
    lang, status = get_lang_status(c, message.from_user.id)
    user_id = message.from_user.id

    if status != "–û–¥—Ä—É–∂–µ–Ω–∏–π(–∞)":
        await message.answer(MESSAGES[lang]["profile_no_marriage"])
        conn.close()
        return

    c.execute('SELECT user1_id, user2_id, wed_date FROM couples WHERE user1_id = ? OR user2_id = ?', (user_id, user_id))
    row = c.fetchone()
    if not row:
        await message.answer(MESSAGES[lang]["no_spouse"])
        conn.close()
        return

    user1_id, user2_id, wed_date_str = row
    spouse_id = user2_id if user1_id == user_id else user1_id
    spouse_name = await get_user_name(message.chat.id, spouse_id)
    wed_date = datetime.fromisoformat(wed_date_str)
    wed_since = wed_date.strftime("%d.%m.%Y")

    text = (
        MESSAGES[lang]["profile_header"] +
        f"üÜî ID: {user_id}\n" +
        MESSAGES[lang]["profile_status"].format(status=status) +
        MESSAGES[lang]["profile_married_to"].format(partner=spouse_name) +
        MESSAGES[lang]["profile_married_since"].format(since=wed_since)
    )

    await message.answer(text)
    conn.close()

async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="commands", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏"),
        BotCommand(command="propose", description="–ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä—É–∫–∏ —ñ —Å–µ—Ä—Ü—è"),
        BotCommand(command="marry", description="–ü–æ—á–∞—Ç–∏ –≤–µ—Å—ñ–ª–ª—è"),
        BotCommand(command="topcouples", description="–¢–æ–ø –∑–∞—Ä—É—á–µ–Ω–∏—Ö –ø–∞—Ä"),
        BotCommand(command="spouse", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–≤–æ—é –ø–æ–ª–æ–≤–∏–Ω–∫—É"),
        BotCommand(command="divorce", description="–†–æ–∑–≤–µ–∑—Ç–∏—Å—å"),
        BotCommand(command="profile", description="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø—Ä–æ—Ñ—ñ–ª—å"),
    ]
    await bot.set_my_commands(commands)

async def main():
    await set_bot_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∂–∏–≤—É—á–æ—Å—Ç—ñ –Ω–∞ Replit
    asyncio.run(main())
